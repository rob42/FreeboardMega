
/*
 * Copyright 2010,2011,2012,2013 Robert Huitema robert@42.co.nz
 *
 * This file is part of FreeBoard. (http://www.42.co.nz/freeboard)
 *
 *  FreeBoard is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.

 *  FreeBoard is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.

 *  You should have received a copy of the GNU General Public License
 *  along with FreeBoard.  If not, see <http://www.gnu.org/licenses/>.
 */
// Do not remove the include below
#include "freeboardDue.h"

volatile bool execute = false;
volatile int interval = 0;

void doEvery100(){
	execute=true;
	interval++;
}

void setup()
{
// Add your initialization code here
	//	//setup timers
		if (DEBUG) Serial.println("Start timer..");
		Timer.getAvailable().attachInterrupt(doEvery100).start(100);


		if (DEBUG) Serial.println("Setup complete..");
}

// The loop function is called in an endless loop
void loop()
{
//Add your repeated code here
	if (execute) {
			//timer ping
			//do these every 100ms
			//autopilot.calcAutoPilot();

			if (interval % 2 == 0) {
				//do every 200ms
				//wind.calcWindSpeedAndDir();
			}
			if (interval % 50 == 0) {
				//do every 500ms
				//wind.calcWindSpeedAndDir();
				//wind.calcWindData();
				//nmea.printWindNmea();
				//fire any alarms
				//alarm.checkAlarms();
				//model.writeSimple(Serial);
			}
			if (interval % 100 == 0) {
				Serial.print("freeMemory()=");
				//Serial.println(freeMemory());
				//do every 1000ms
				//anchor.checkAnchor();
				//alarm.checkWindAlarm();
				//alarm.checkLvlAlarms();
				//nmea.printTrueHeading();

			}

			execute = false;
		}
}



void process(char * s, char parser) {
	//if (DEBUG) Serial.print("Process str:");
	//if (DEBUG) Serial.println(s);
	char *cmd = strtok(s, ",");
	while (cmd != NULL && strlen(cmd) > 3) {
		//starts with # its a command
		//if (DEBUG) Serial.print("Process incoming..l=");
		//if (DEBUG) Serial.print(strlen(cmd));
		//if (DEBUG) Serial.print(", ");
		//if (DEBUG) Serial.println(cmd);

		char key[5];
		int l = strlen(cmd);
		bool save = false;
		if (cmd[0] == '#') {
			//
			strncpy(key, cmd, 4);
			key[4] = '\0';
			char val[l - 4];
			memcpy(val, &cmd[5], l - 5);
			val[l - 5] = '\0';
			//if (DEBUG) Serial.print(key);
			//if (DEBUG) Serial.print(" = ");
			//if (DEBUG) Serial.println(val);

			//anchor
			if (strcmp(key, ANCHOR_ALARM_STATE) == 0) {
				//if (DEBUG) Serial.print("AA Entered..");
				model.setAnchorAlarmOn(atoi(val));
				if (atoi(val) == 1) {
					anchor.setAnchorPoint();
				}
				save = true;
			} else if (strcmp(key, ANCHOR_ALARM_ADJUST) == 0) {
				model.setAnchorRadius(model.getAnchorRadius() + atof(val));
				save = true;
			} else if (strcmp(key, ANCHOR_ALARM_LAT) == 0) {
				model.setAnchorLat(atof(val));
				save = true;
			} else if (strcmp(key, ANCHOR_ALARM_LON) == 0) {
				model.setAnchorLon(atof(val));
				save = true;
			}
			//autopliot
			else if (strcmp(key, AUTOPILOT_STATE) == 0) {
				//if (DEBUG) Serial.print("AP Entered..");
				//if (DEBUG) Serial.println(val);
				//this is potentailly dangerous, since we dont want the boat diving off on an old target heading.
				//in model we ALWAYS reset to current magnetic or wind heading at this point
				model.setAutopilotOn(atoi(val));
			} else if (strcmp(key, AUTOPILOT_ADJUST) == 0) {
				model.setAutopilotTargetHeading(model.getAutopilotTargetHeading() + atol(val));
			} else if (strcmp(key, AUTOPILOT_SOURCE) == 0) {
				model.setAutopilotReference(val[0]);
			}
			//wind
			else if (strcmp(key, WIND_SPEED_ALARM_STATE) == 0) {
				model.setWindAlarmOn(atoi(val));
				save = true;
			} else if (strcmp(key, WIND_ALARM_KNOTS) == 0) {
				model.setWindAlarmSpeed(atoi(val));
				save = true;
			} else if (strcmp(key, WIND_ZERO_ADJUST) == 0) {
				model.setWindZeroOffset(atoi(val));
				save = true;
			} else if (strcmp(key, LEVEL1_UPPER_ALARM) == 0) {
				model.setLvl1UpperLimit(atoi(val));
				save = true;
			} else if (strcmp(key, LEVEL1_LOWER_ALARM) == 0) {
				model.setLvl1LowerLimit(atoi(val));
				save = true;
			} else if (strcmp(key, LEVEL2_UPPER_ALARM) == 0) {
				model.setLvl2UpperLimit(atoi(val));
				save = true;
			} else if (strcmp(key, LEVEL2_LOWER_ALARM) == 0) {
				model.setLvl2LowerLimit(atoi(val));
				save = true;
			} else if (strcmp(key, LEVEL3_UPPER_ALARM) == 0) {
				model.setLvl3UpperLimit(atoi(val));
				save = true;
			} else if (strcmp(key, LEVEL3_LOWER_ALARM) == 0) {
				model.setLvl3LowerLimit(atoi(val));
				save = true;
			}else if (strcmp(key, CONFIG) == 0) {
				//Serial.println("Sending config..");
				model.writeConfig(Serial);
			}
			//gps,serial,seatalk
			else if (strcmp(key, GPS_MODEL) == 0) {
				model.setGpsModel(atoi(val));
				save = true;
			} else if (strcmp(key, SERIAL_BAUD0) == 0) {
				model.setSerialBaud(atol(val));
				save = true;
			} else if (strcmp(key, SERIAL_BAUD1) == 0) {
				model.setSerialBaud1(atol(val));
				save = true;
			} else if (strcmp(key, SERIAL_BAUD2) == 0) {
				model.setSerialBaud2(atol(val));
				save = true;
			} else if (strcmp(key, SERIAL_BAUD3) == 0) {
				model.setSerialBaud3(atol(val));
				save = true;
			} else if (strcmp(key, SEATALK) == 0) {
				model.setSeaTalk(atoi(val));
				save = true;
			}
			if (save) model.saveConfig();

		} else {
			strncpy(key, cmd, 3);
			key[3] = '\0';
			char val[l - 3];
			memcpy(val, &cmd[4], l - 4);
			val[l - 4] = '\0';
			//if (DEBUG) Serial.print(key);
			//if (DEBUG) Serial.print(" = ");
			//if (DEBUG) Serial.println(val);
			// incoming data = WST,WSA,WDT,WDA,WSU,LAT,LON,COG,MGH,SOG,YAW
			if (strcmp(key, MGH) == 0) {
				model.setMagneticHeading(atof(val));
			}
			if (strcmp(key, DECL) == 0) {
				model.setDeclination(atof(val));
			}
			if (strcmp(key, WDT) == 0) {
				model.setWindTrueDir(atoi(val));
			}

		}
		//next token
		cmd = strtok(NULL, ",");
	}
	//if (DEBUG) Serial.println("Process str exit");
}

byte getChecksum(char* str) {
	byte cs = 0; //clear any old checksum
	for (unsigned int n = 1; n < strlen(str) - 1; n++) {
		cs ^= str[n]; //calculates the checksum
	}
	return cs;
}
